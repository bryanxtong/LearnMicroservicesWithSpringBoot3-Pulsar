spring.application.name=multiplication
# Gives us access to the H2 database web console
spring.h2.console.enabled=true
# Creates the database in a file
spring.datasource.url=jdbc:h2:file:~/multiplication;AUTO_SERVER=TRUE
# Creates or updates the schema if needed
spring.jpa.hibernate.ddl-auto=update
# For educational purposes we will show the SQL in console
# spring.jpa.show-sql=true

# Gamification service URL
service.gamification.host=http://localhost:8081

pulsar.attempts.topic=attempts.topic
pulsar.attempts.partitions=4

#logging.level.org.apache.pulsar.client.admin.PulsarAdmin=DEBUG
#spring.config.import=optional:consul:

#multiplication app as a producer
spring.pulsar.admin.service-url=http://localhost:8080
spring.pulsar.client.service-url=pulsar://localhost:6650
#spring.pulsar.defaults.type-mappings[0].message-type=microservices.book.event.challenge.ChallengeSolvedEvent
#spring.pulsar.defaults.type-mappings[0].schema-info.schema-type=JSON
#spring.pulsar.defaults.type-mappings[0].topic-name=attempts.topic
spring.pulsar.template.observations-enabled=true
spring.pulsar.listener.observation-enabled=true

##working with default logback configuration for distributed tracing
logging.pattern.level=[${spring.application.name:-},%X{traceId:-},%X{spanId:-}]
logging.include-application-name=false
management.tracing.sampling.probability=1

##During the process of creating the pulsar lazy producer in appender, there should no logs in the pulsar client code to append logs which would lead to dead lock
##Disable logs for pulsar client as a temp solution
logging.level.org.apache.pulsar.client.impl=ERROR


